<%#
kind: provision
name: Kickstart RHEL default
oses:
- RedHat 7
- CentOS 7
%>
<%#
This template accepts the following parameters:
- lang: string (default="en_US.UTF-8")
- keyboard: string (default="us")
- time-zone: string (default="UTC")
- http-proxy: string (default="")
- http-proxy-port: string (default="")
- force-puppet: boolean (default=false)
- enable-puppetlabs-repo: boolean (default=false)
- salt_master: string (default=undef)
- ntp-server: string (default="ntp.ivq.tcs")
%>
<%
  os_major = @host.operatingsystem.major.to_i
  os_minor = @host.operatingsystem.minor.to_i
  # safemode renderer does not support unary negation
  pm_set = @host.puppetmaster.empty? ? false : true
  proxy_string = @host.params['http-proxy'] ? " --proxy=http://#{@host.params['http-proxy']}:#{@host.params['http-proxy-port']}" : ''
  puppet_enabled = pm_set || @host.params['force-puppet'] && @host.params['force-puppet'] == 'true'
  salt_enabled = @host.params['salt_master'] ? true : false
  section_end = os_major <= 5 ? '' : '%end'
  repo_server = @host.params['repo_server']
%>
install
<%= @mediapath %><%= proxy_string %>
lang <%= @host.params['lang'] || 'en_US.UTF-8' %>
selinux --<%= @host.params['selinux'] || 'permissive' %>
keyboard <%= @host.params['keyboard'] || 'us' %>
skipx

<% subnet = @host.subnet -%>
<% if subnet.respond_to?(:dhcp_boot_mode?) -%>
  <% dhcp = subnet.dhcp_boot_mode? && !@static -%>
<% else -%>
  <% dhcp = !@static -%>
<% end -%>
#network --bootproto <%= dhcp ? 'dhcp' : "static --ip=#{@host.ip} --netmask=#{subnet.mask} --gateway=#{subnet.gateway} --nameserver=#{[subnet.dns_primary, subnet.dns_secondary].select(&:present?).join(',')}" %> --device=<%= @host.mac -%> --hostname <%= @host %>
<%
echec="no adequate network card found"
resultat=""
router_ntp="vide"
@host.interfaces.each do | carte |
 if resultat.empty?  and  carte.provision and ( not carte.ip.empty? ) then
  resultat="network --bootproto static"
  resultat="#{resultat} --ip=#{carte.ip} --netmask=#{carte.subnet.mask} --gateway=#{carte.subnet.gateway}" 
  resultat="#{resultat} --nameserver=#{carte.subnet.dns_primary},#{carte.subnet.dns_secondary}"
  resultat="#{resultat} --device=#{carte.mac} --hostname=#{carte.name.split('.').first}"
  router_ntp=carte.subnet.gateway
  @prov_carte_name=carte.name 
 end
end
#resultat=echec if resultat.empty?
raise "provision nic unknown" if @prov_carte_name.nil?
ix = @host.primary_interface.name.split('.')
jx = ix.drop(1).join('.')
px =  @host.primary_interface.subnet.dns_primary
sx =  @host.primary_interface.subnet.dns_secondary
-%>
<%= resultat %>
<%#= @host.interfaces %>
rootpw --iscrypted <%= root_pass %>
firewall --<%= os_major >= 6 ? 'service=' : '' %>ssh
authconfig --useshadow --passalgo=sha256 --kickstart
timezone --ntpservers <%= router_ntp %> --utc <%= @host.params['time-zone'] || 'UTC' %>

<% if os_major >= 7 && @host.info['parameters']['realm'] && @host.otp && @host.realm && @host.realm.realm_type == 'Active Directory' -%>
realm join --one-time-password=<%= @host.otp %> <%= @host.realm %>
<% end -%>

<% if os_major > 4 -%>
services --disabled gpm,sendmail,cups,pcmcia,isdn,rawdevices,hpoj,bluetooth,openibd,avahi-daemon,avahi-dnsconfd,hidd,hplip,pcscd

repo --name="EPEL" --baseurl=http://<%=repo_server%>/misc/epel/<%=@host.operatingsystem.major%>/os/<%= @host.architecture %>
<% end -%>

bootloader --location=mbr --append="nofb quiet splash=quiet" <%= grub_pass %>
<% if os_major == 5 -%>
key --skip
<% end -%>


<% if @dynamic -%>
%include /tmp/diskpart.cfg
<% else -%>
<%= @host.diskLayout %>
<% end -%>

text
reboot

%packages
@Base
cifs-utils
<% if os_major >= 6 -%>
redhat-lsb-core
<% end -%>
policycoreutils-python
iftop
iotop
htop
ntpdate
nmap
git
<% if os_major >= 6 -%>
redhat-lsb-core
<% end -%>
<%= section_end -%>

<% if @dynamic -%>
%pre
<%= @host.diskLayout %>
<%= section_end -%>
<% end -%>

%post --nochroot
exec < /dev/tty3 > /dev/tty3
#changing to VT 3 so that we can see whats going on....
/usr/bin/chvt 3
(
cp -va /etc/resolv.conf /mnt/sysimage/etc/resolv.conf
/usr/bin/chvt 1
) 2>&1 | tee /mnt/sysimage/root/install.postnochroot.log
<%= section_end -%>

%post
logger "Starting anaconda <%= @host %> postinstall"
exec < /dev/tty3 > /dev/tty3
#changing to VT 3 so that we can see whats going on....
/usr/bin/chvt 3
(
systemctl stop NetworkManager
systemctl disable NetworkManager
<%= snippet 'ks_snp_iss_2_adapter' %>
#Create common repo for RHEL
<%= snippet 'ks_snp_iss_common_repo' %>

#update local time
echo "updating system time"
/usr/sbin/ntpdate -sub <%= router_ntp %>
/usr/sbin/hwclock --systohc

cat > /etc/resolv.conf << EOF
domain <%= jx -%>
<% if ! px.empty? then %>
nameserver <%= px %>
<% end -%>
<% if ! sx.empty? then %>
nameserver <%= sx %>
<% end -%>
EOF



<% if puppet_enabled %>
# and add the puppet package
yum -t -y -e 0 install puppet

echo "Configuring puppet"
cat > /etc/puppet/puppet.conf << EOF
<%= snippet 'ks_snp_iss_puppet.conf' %>
<%#= @prov_carte_name %>
EOF
# Setup puppet to run on system reboot
echo "stop puppet client"
/usr/bin/systemctl stop puppet
echo "register puppet client" 
/usr/bin/puppet agent --config /etc/puppet/puppet.conf -o --tags no_such_tag <%= @host.puppetmaster.blank? ? '' : "--server #{@host.puppetmaster}" %> --no-daemonize
echo "enable puppet for next start"
/usr/bin/systemctl enable puppet
<% end -%>

sync

# Inform the build system that we are done.
echo "Informing Foreman that we are built"
wget -q -O /dev/null --no-check-certificate <%= foreman_url %>
) 2>&1 | tee /root/install.post.log
exit 0

<%= section_end -%>
